<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coroutines on warrick.io</title>
    <link>//warrick.io/tags/coroutines/</link>
    <description>Recent content in Coroutines on warrick.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Oct 2013 20:25:56 +0000</lastBuildDate>
    
	<atom:link href="//warrick.io/tags/coroutines/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>consumer decorator</title>
      <link>//warrick.io/posts/consumer-decorator/</link>
      <pubDate>Fri, 18 Oct 2013 20:25:56 +0000</pubDate>
      
      <guid>//warrick.io/posts/consumer-decorator/</guid>
      <description>Just stumbled across this little gem, and I don&amp;rsquo;t want to forget about it. Here is a decorator that takes care of the ugliness in first call to .next(), necessary for receiving coroutines in Python.
def consumer(func): def start(*args,**kwargs): c = func(*args,**kwargs) c.next() return c return start@consumer def recv_count(): try: while True: n = (yield) # Yield expression print &amp;#34;T-minus&amp;#34;, n except GeneratorExit: print &amp;#34;Kaboom!&amp;#34; http://www.dabeaz.com/coroutines/Coroutines.pdf</description>
    </item>
    
  </channel>
</rss>