<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Postgres on warrick.io</title>
    <link>//warrick.io/tags/postgres/</link>
    <description>Recent content in Postgres on warrick.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 May 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="//warrick.io/tags/postgres/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>postgres histogram</title>
      <link>//warrick.io/posts/postgres-histogram/</link>
      <pubDate>Thu, 22 May 2014 00:00:00 +0000</pubDate>
      
      <guid>//warrick.io/posts/postgres-histogram/</guid>
      <description>A huge thank you for this little gem &amp;mdash; a quick and dirty histogram in PostgreSQL:
WITH stats AS ( SELECT min(__value__) , max(__value__) FROM __table__ ), histogram AS ( SELECT WIDTH_BUCKET(__value__, min, max, 9) --&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;  AS bucket , MIN(__value__) , MAX(__value__) , COUNT(*) AS freq FROM __table__ CROSS JOIN stats GROUP BY bucket ORDER BY bucket ) SELECT bucket , min , max , freq , REPEAT(&amp;#39;*&amp;#39;, (freq::FLOAT / max(freq) over() * 30)::INT) AS bar FROM histogram ;bucket | min | max | freq | bar --------+-------+-------+--------+-------------------------------- 1 | 0 | 8517 | 294826 | ****************************** 2 | 8577 | 16400 | 73992 | ******** 3 | 17563 | 25200 | 8202 | * 4 | 26219 | 33651 | 853 | 5 | 34560 | 42600 | 1312 | 6 | 43200 | 51063 | 2592 | 7 | 53104 | 59037 | 9 | 8 | 60000 | 68400 | 17 | 9 | 68577 | 76833 | 54 | 10 | 77060 | 85499 | 60 | Visualize the frequency distribution of some __value__ in your __table__, and adjust the number of buckets to increase the resolution.</description>
    </item>
    
    <item>
      <title>syntax highlighting in psql vim session</title>
      <link>//warrick.io/posts/psql-editor-highlighting/</link>
      <pubDate>Sun, 23 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>//warrick.io/posts/psql-editor-highlighting/</guid>
      <description>If you spend a lot of time using psql, you should definitely use the \e and \ef commands to edit queries and functions in VIM.
\e [FILE] [LINE] edit the query buffer (or file) with external editor \ef [FUNCNAME [LINE]] edit function definition with external editor One annoyance is that, because the temporary file created doesn&amp;rsquo;t have a .sql extension, VIM doesn&amp;rsquo;t enable syntax highlighting.
Here is a simple autocmd that will turn syntax highlighting on that match psql&amp;rsquo;s filename pattern:</description>
    </item>
    
    <item>
      <title>postgres dblink</title>
      <link>//warrick.io/posts/postgres-dblink/</link>
      <pubDate>Wed, 04 Dec 2013 20:05:03 +0000</pubDate>
      
      <guid>//warrick.io/posts/postgres-dblink/</guid>
      <description>Connect to and query a remote PostgreSQL database from a local database.
First install the dblink extension and enable it for your database, e.g.
sudo apt-get install postgresql-contrib-9.1 sudo -u postgres psql -c &amp;#39;CREATE EXTENSION dblink;&amp;#39; foo Then connect to the remote database with the dblink_connect function:
SELECT dblink_connect(&amp;#39;hostaddr=10.0.1.1 port=5432 dbname=foo user=bar password=baz&amp;#39;); http://www.postgresql.org/docs/9.1/static/contrib-dblink-connect.html</description>
    </item>
    
    <item>
      <title>kill postgres query</title>
      <link>//warrick.io/posts/kill-postgres-query/</link>
      <pubDate>Tue, 29 Oct 2013 20:39:45 +0000</pubDate>
      
      <guid>//warrick.io/posts/kill-postgres-query/</guid>
      <description>Find the PID of the query from a system utility like top or htop, or from the &amp;ldquo;pg_catalog.pg_stat_activity&amp;rdquo; table.
sudo -u postgres psql postgres=# SELECT pg_cancel_backend(28710);</description>
    </item>
    
    <item>
      <title>python in postgres</title>
      <link>//warrick.io/posts/python-in-postgres/</link>
      <pubDate>Sat, 19 Oct 2013 00:31:15 +0000</pubDate>
      
      <guid>//warrick.io/posts/python-in-postgres/</guid>
      <description>Installing and adding Python to your PostgreSQL database in Ubuntu:
sudo apt-get install postgresql-plpython-9.1 sudo -u postgres psql -c &amp;#39;CREATE EXTENSION plpythonu;&amp;#39; dbname Check that it was installed:
psql -c &amp;#39;\dL&amp;#39; dbname List of languages Name | Owner | Trusted -----------+----------+--------- plpgsql | postgres | t plpythonu | postgres | f (2 rows) Keep in mind that Python is an &amp;lsquo;untrusted&amp;rsquo; language meaning that functions written in PL/Pythonu execute in an administrative context.</description>
    </item>
    
    <item>
      <title>postgres index usage</title>
      <link>//warrick.io/posts/postgres-index-usage/</link>
      <pubDate>Mon, 09 Sep 2013 03:16:45 +0000</pubDate>
      
      <guid>//warrick.io/posts/postgres-index-usage/</guid>
      <description>Awesome article on understanding postgres performance had this little nugget, which gives you the tables in your database with the percentage of time they use an index:
SELECT relname, 100 * idx_scan / (seq_scan + idx_scan) percent_of_times_index_used, n_live_tup rows_in_table FROM pg_stat_user_tables WHERE seq_scan + idx_scan &amp;gt; 0 ORDER BY n_live_tup DESC;</description>
    </item>
    
    <item>
      <title>postgres database and table size</title>
      <link>//warrick.io/posts/postgres-database-and-table-size/</link>
      <pubDate>Wed, 05 Jun 2013 23:54:58 +0000</pubDate>
      
      <guid>//warrick.io/posts/postgres-database-and-table-size/</guid>
      <description>SELECT pg_size_pretty(pg_database_size(&amp;#39;foo_db&amp;#39;)); SELECT pg_size_pretty(pg_total_relation_size(&amp;#39;bar_table&amp;#39;));</description>
    </item>
    
    <item>
      <title>coalesce</title>
      <link>//warrick.io/posts/coalesce/</link>
      <pubDate>Tue, 29 Jan 2013 18:43:36 +0000</pubDate>
      
      <guid>//warrick.io/posts/coalesce/</guid>
      <description>I have never encountered the COALESCE function in SQL, so I feel the need to take note of it, COALESCE(value, ...) returns the first non-NULL value in the argument list.
http://www.postgresql.org/docs/9.1/static/functions-conditional.html
http://dev.mysql.com/doc/refman/5.0/en/comparison-operators.html#function_coalesce</description>
    </item>
    
    <item>
      <title>week of year in python and in postgres</title>
      <link>//warrick.io/posts/week-of-year-in-python-and-in-postgres/</link>
      <pubDate>Tue, 04 Dec 2012 22:13:27 +0000</pubDate>
      
      <guid>//warrick.io/posts/week-of-year-in-python-and-in-postgres/</guid>
      <description>import datetime today = datetime.date.today() today.isocalendar()[1]SELECT EXTRACT(WEEK FROM TIMESTAMP &amp;#39;2012-12-04 20:38:40&amp;#39;);</description>
    </item>
    
  </channel>
</rss>