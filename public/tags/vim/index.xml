<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim on warrick.io</title>
    <link>//warrick.io/tags/vim/</link>
    <description>Recent content in Vim on warrick.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Jan 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="//warrick.io/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>stay on home row</title>
      <link>//warrick.io/posts/stay-on-home/</link>
      <pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>//warrick.io/posts/stay-on-home/</guid>
      <description>I am sick of moving my hands to the mouse and arrow keys. This is my formula on Mac OS X for minimizing mouse usage while I&amp;rsquo;m working:
MacVim [1] &amp;mdash; Modal editor or bust.
Spectacle [2] &amp;mdash; moving windows with keyboard shortcuts.
I prefer vim-like Shift+Command+H/J/K/L for moving windows about.
Vimium [3] &amp;mdash; Chromium extension for vim-like page navigation shortcuts.
The easymotion-esque link navigation is just brilliant. You can &amp;lsquo;click&amp;rsquo; links, and complete complex forms without touching the mouse.</description>
    </item>
    
    <item>
      <title>highlight column in vim</title>
      <link>//warrick.io/posts/highlight-column-vim/</link>
      <pubDate>Sat, 25 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>//warrick.io/posts/highlight-column-vim/</guid>
      <description>:set cc=80:help &amp;#39;colorcolumn&amp;#39;</description>
    </item>
    
    <item>
      <title>selected pasted text in vim</title>
      <link>//warrick.io/posts/select-pasted-vim/</link>
      <pubDate>Tue, 21 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>//warrick.io/posts/select-pasted-vim/</guid>
      <description>Select the previously pasted text
nnoremap gp `[v`] http://vim.wikia.com/wiki/Selecting_your_pasted_text</description>
    </item>
    
    <item>
      <title>vim insert before pattern</title>
      <link>//warrick.io/posts/vim-newline-before-pattern/</link>
      <pubDate>Thu, 02 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>//warrick.io/posts/vim-newline-before-pattern/</guid>
      <description>Inserting a newline before lines matching a pattern, e.g. before comments #:
:g/^#/norm O http://stackoverflow.com/a/2673266/255528</description>
    </item>
    
    <item>
      <title>open all vim buffers in tabs</title>
      <link>//warrick.io/posts/vim-buffers-to-tabs/</link>
      <pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>//warrick.io/posts/vim-buffers-to-tabs/</guid>
      <description>:bufdo tab split</description>
    </item>
    
    <item>
      <title>reselect visual block in vim</title>
      <link>//warrick.io/posts/vim-reselect-visual-block/</link>
      <pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>//warrick.io/posts/vim-reselect-visual-block/</guid>
      <description>I try to minimize visual block usage in favor of gestures, but for whatever reason I have been neglecting a very important shortcut for reselecting the previously selected text.</description>
    </item>
    
    <item>
      <title>syntax highlighting in psql vim session</title>
      <link>//warrick.io/posts/psql-editor-highlighting/</link>
      <pubDate>Sun, 23 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>//warrick.io/posts/psql-editor-highlighting/</guid>
      <description>If you spend a lot of time using psql, you should definitely use the \e and \ef commands to edit queries and functions in VIM.
\e [FILE] [LINE] edit the query buffer (or file) with external editor \ef [FUNCNAME [LINE]] edit function definition with external editor One annoyance is that, because the temporary file created doesn&amp;rsquo;t have a .sql extension, VIM doesn&amp;rsquo;t enable syntax highlighting.
Here is a simple autocmd that will turn syntax highlighting on that match psql&amp;rsquo;s filename pattern:</description>
    </item>
    
    <item>
      <title>soft wrapping in vim</title>
      <link>//warrick.io/posts/vim-soft-wrapping/</link>
      <pubDate>Sat, 22 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>//warrick.io/posts/vim-soft-wrapping/</guid>
      <description>By default, wrap in VIM will break lines in the middle of words.
To enable soft wrapping, wrapping without breaking words, simply enable linebreak.
:set wrap:set linebreak http://vimcasts.org/episodes/soft-wrapping-text/</description>
    </item>
    
    <item>
      <title>vim tips day 01</title>
      <link>//warrick.io/posts/vim-tips-day-01/</link>
      <pubDate>Wed, 15 Jan 2014 17:44:31 +0000</pubDate>
      
      <guid>//warrick.io/posts/vim-tips-day-01/</guid>
      <description>Started reading Practical Vim and I&amp;rsquo;m going to start listing tips I should be using more frequently in VIM.
zz redraw screen with current line in middle CTRL-o execute one command, return to Insert mode CTRL-r {register} paste from register while in Insert mode CTRL-r= use the expression register to evaluate and insert a calculation q: command-line window</description>
    </item>
    
    <item>
      <title>vim reminders</title>
      <link>//warrick.io/posts/vim-reminders/</link>
      <pubDate>Tue, 01 Oct 2013 03:56:18 +0000</pubDate>
      
      <guid>//warrick.io/posts/vim-reminders/</guid>
      <description>I always trounce my yank buffer when I delete lines. Don&amp;rsquo;t forget that registers 0-9 are a history of the past 10 yank buffers.
&amp;#34;0p ... &amp;#34;9p Sometimes, when doing a global search and replace, it is convenient to be prompted before replacing each string.</description>
    </item>
    
    <item>
      <title>readline vi mode</title>
      <link>//warrick.io/posts/readline-vi-mode/</link>
      <pubDate>Wed, 26 Jun 2013 17:33:13 +0000</pubDate>
      
      <guid>//warrick.io/posts/readline-vi-mode/</guid>
      <description># ~/.inputrcset editing-mode vi</description>
    </item>
    
    <item>
      <title>vim autocomplete</title>
      <link>//warrick.io/posts/vim-autocomplete/</link>
      <pubDate>Mon, 10 Jun 2013 14:23:57 +0000</pubDate>
      
      <guid>//warrick.io/posts/vim-autocomplete/</guid>
      <description>VIM has word auto-completion built-in, press CTRL+n while in Insert mode:</description>
    </item>
    
    <item>
      <title>visual block mode</title>
      <link>//warrick.io/posts/visual-block-mode/</link>
      <pubDate>Tue, 04 Jun 2013 00:33:31 +0000</pubDate>
      
      <guid>//warrick.io/posts/visual-block-mode/</guid>
      <description>Multi-line text insert: 1. CTRL + V (select column) 2. SHIFT + i (insert) 3. type text 4. ESCMulti-line text append: 1. CTRL + V (select lines) 2. $ (extend block to end of lines) 2. SHIFT + a (append) 3. type text 4. ESC</description>
    </item>
    
    <item>
      <title>markers in vim</title>
      <link>//warrick.io/posts/markers-in-vim/</link>
      <pubDate>Thu, 28 Mar 2013 15:57:18 +0000</pubDate>
      
      <guid>//warrick.io/posts/markers-in-vim/</guid>
      <description>Just started using markers in VIM to quickly navigate to places in my code.
mr - set marker r, where r can be a-z &amp;#39;r - jump to mark stored in register r, beginning of line `r - jump to position stored in register r, exact position New or aspiring VIM users like myself should read these:
 http://yanpritzker.com/2011/12/16/learn-to-speak-vim-verbs-nouns-and-modifiers/ http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118  </description>
    </item>
    
    <item>
      <title>Doh! I forgot to sudo.</title>
      <link>//warrick.io/posts/doh-i-forgot-to-sudo/</link>
      <pubDate>Wed, 07 Dec 2011 21:46:00 +0000</pubDate>
      
      <guid>//warrick.io/posts/doh-i-forgot-to-sudo/</guid>
      <description>I often forget to sudo vim. I make significant changes to the file just to find out that I don&amp;rsquo;t have permissions to save the file.
Well, now that I&amp;rsquo;ve memorized this little gem it doesn&amp;rsquo;t matter:
:w! sudo tee % The % is a shortcut for the filename. You are really just piping the output through tee to the file - effectively overwriting the contents.
Ta-dah!</description>
    </item>
    
  </channel>
</rss>